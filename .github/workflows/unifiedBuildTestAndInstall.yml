name: Build, Test, and Install

on:
  workflow_dispatch:
    inputs:
      runner:
        description: "The GitHub runner to use"
        required: true
        type: choice
        options:
          - ubuntu-20.04
          - macos-11
          - windows-2019
      cmake_build_type:
        required: true
        type: choice
        options:
          - release
          - relwithdebinfo
          - debug
      build_shared_libs:
        required: true
        type: choice
        options:
          - on
          - off
      llvm_enable_assertions:
        required: true
        type: choice
        options:
          - on
          - off
      llvm_force_enable_stats:
        required: true
        type: choice
        options:
          - on
          - off
      runTests:
        description: "If true, then run tests, otherwise skip tests"
        required: true
        type: choice
        options:
          - true
          - false
      install:
        description: "Install steps to run"
        required: false
        type: string
  workflow_call:
    inputs:
      runner:
        description: "The GitHub runner to use"
        required: true
        type: string
      cmake_build_type:
        required: true
        type: string
      build_shared_libs:
        required: true
        type: string
      llvm_enable_assertions:
        required: true
        type: string
      llvm_force_enable_stats:
        required: true
        type: string
      runTests:
        description: "If true, then run tests, otherwise skip tests"
        required: true
        type: boolean
      install:
        description: "Install steps to run"
        required: false
        type: string

jobs:
  build-test-and-install:
    runs-on: inputs.runner
    steps:
      - name: Clone llvm/circt
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          submodules: "true"
      - name: Unshallow llvm/circt
        run: |
          git fetch --unshallow --no-recurse-submodules
# Per-operating system setup
      - name: Setup (linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install ninja-build
          if [[ ${{ inputs.runner == 'ubuntu-20.04' ]]; then
            echo EXTRA_CMAKE_ARGS="-DCMAKE_C_COMPILER=clang-12 -DCMAKE_CXX_COMPILER=clang++-12" >> $GITHUB_ENV
          fi
      - name: Setup (macos)
        if: runner.os == 'macOS'
        run: |
          brew install ninja gnu-tar
      - name: Setup (windows)
        if: runner.os == 'Windows'
        run: |
          echo SETUP="./utils/find-vs.ps1" >> $GITHUB_ENV
# Configure
      - name: Configure CIRCT
        run: |
          $SETUP
          mkdir build
          cd build
          cmake -G Ninja -S "$(pwd)/../llvm/llvm" $EXTRA_CMAKE_ARGS -DCMAKE_BUILD_TYPE=${{ inputs.cmake_build_type }} -DBUILD_SHARED_LIBS=${{ inputs.build_shared_libs }} -DLLVM_BUILD_TOOLS=ON -DLLVM_BUILD_EXAMPLES=OFF -DLLVM_ENABLE_ASSERTIONS=${{ inputs.llvm_enable_assertions }} -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_EXTERNAL_PROJECTS=circt -DLLVM_EXTERNAL_CIRCT_SOURCE_DIR=".." -DLLVM_STATIC_LINK_CXX_STDLIB=ON -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_PARALLEL_LINK_JOBS=1 -DLLVM_TARGETS_TO_BUILD="host" -DLLVM_FORCE_ENABLE_STATS=${{ inputs.llvm_force_enable_stats }} -DLLVM_ENABLE_ZSTD=OFF -DVERILATOR_DISABLE=ON -DLLVM_PARALLEL_LINK_JOBS=1 -DCIRCT_RELEASE_TAG_ENABLED=ON -DCIRCT_RELEASE_TAG=firtool -DCMAKE_EXPORT_COMPILE_COMMANDS=OFF -DCMAKE_INSTALL_PREFIX="$(pwd)/../install"
# Optionally test
      - name: Test CIRCT
        if: inputs.runTests
        run: |
          $SETUP
          ninja -C build check-circt check-circt-unit
      - name: Install
        if: inputs.install
        run: |
          $SETUP
          ninja -C build ${{ inputs.install }}
          file install/*
          file install/bin/*
      - name: Upload Binary
        uses: actions/upload-artifact@v3
        with:
          name: install
          path: install
          retention-days: 1
